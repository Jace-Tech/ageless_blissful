"use strict";(()=>{var e={};e.id=428,e.ids=[428],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6697:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>f,patchFetch:()=>j,requestAsyncStorage:()=>h,routeModule:()=>m,serverHooks:()=>g,staticGenerationAsyncStorage:()=>x});var a={};r.r(a),r.d(a,{GET:()=>l,POST:()=>d,dynamic:()=>u});var s=r(9790),n=r(540),o=r(2273),c=r(9096),i=r(3524);let u="force-dynamic",p=new i.PrismaClient;async function d(e){try{let t=await e.json(),r=await p.contact.create({data:{name:t.name,email:t.email,phone:t.phone||"",subject:t.subject,message:t.message}});return c.NextResponse.json({success:!0,contact:r})}catch(e){return console.error("Error creating contact:",e),c.NextResponse.json({success:!1,error:"Failed to create contact"},{status:500})}}async function l(){try{let e=await p.contact.findMany({orderBy:{createdAt:"desc"}});return c.NextResponse.json({success:!0,contacts:e})}catch(e){return console.error("Error fetching contacts:",e),c.NextResponse.json({success:!1,error:"Failed to fetch contacts"},{status:500})}}let m=new s.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/contacts/route",pathname:"/api/contacts",filename:"route",bundlePath:"app/api/contacts/route"},resolvedPagePath:"/Users/admin/Documents/app/app/api/contacts/route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:h,staticGenerationAsyncStorage:x,serverHooks:g}=m,f="/api/contacts/route";function j(){return(0,o.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:x})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),a=t.X(0,[85,664],()=>r(6697));module.exports=a})();